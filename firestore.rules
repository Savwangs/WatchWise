rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Families collection - only family members can access
    match /families/{familyId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.parentId == request.auth.uid || 
         resource.data.childDeviceIds[request.auth.uid] != null);
    }
    
    // Child devices - parents can access their children's devices
    match /childDevices/{deviceId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.parentId == request.auth.uid || 
         resource.data.childUserId == request.auth.uid);
    }
    
    // Pairing requests - anyone can create, and any authenticated user can read during pairing
    match /pairingRequests/{requestId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated(); // Allow any authenticated user to read during pairing
      allow update: if isAuthenticated() && 
        (resource.data.childUserId == request.auth.uid || 
         (resource.data.parentUserId != null && resource.data.parentUserId == request.auth.uid) ||
         (resource.data.parentUserId == null && resource.data.isActive == false)); // Allow any authenticated user to update inactive requests during pairing
      allow delete: if isAuthenticated() && 
        (resource.data.childUserId == request.auth.uid || 
         (resource.data.parentUserId != null && resource.data.parentUserId == request.auth.uid));
    }
    
    // Parent-child relationships - only involved parties can access
    match /parentChildRelationships/{relationshipId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() && 
        (resource.data.parentUserId == request.auth.uid || 
         resource.data.childUserId == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.parentUserId == request.auth.uid || 
         resource.data.childUserId == request.auth.uid);
    }
    
    // Screen time data - parents can access their children's data
    match /screenTimeData/{docId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.parentId == request.auth.uid || 
         resource.data.deviceId.matches(request.auth.uid + '.*'));
    }
    
    // Messages - only sender and recipient can access
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.parentId == request.auth.uid || 
         resource.data.childDeviceId.matches(request.auth.uid + '.*'));
    }
    
    // Settings - users can only access their own settings
    match /settings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Test collection (for connection testing)
    match /_test/{docId} {
      allow read, write: if isAuthenticated();
    }
  }
} 